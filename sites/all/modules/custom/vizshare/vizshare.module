<?php
/**
 * @file
 * An example field using the Field Types API.
 */

module_load_include('inc', 'vizshare', 'vizshare.formatters');

/**
 * Implementation of hook_menu().
 */
function vizshare_menu() {
  $items = array();
  $items['visualization/new'] = array(
    'title' => 'Create visualization',
    'description' => 'Create a visualization',
    // 'menu_name'       => 'main-menu',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('vizshare_builder_form'),
    'access arguments' => array('access content')
  );

  $items['views'] = array(
    'page callback' => 'vizshare_get_angular_view',
    'access arguments' => array('access content')
  );

  $items['admin/config/services/vizshare'] = array(
    'title' => 'VizShare',
    'description' => 'Configure the Data Unity service for VizShare fields.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('vizshare_settings_form'),
    'access arguments' => array('access content'),
    'file' => 'vizshare.admin.inc',
  );

  return $items;
}

/**
 * Suppports retrieving partials for the Angular wizard steps.
 *
 * TODO: improve integration.
 */
function vizshare_get_angular_view($filename) {
  $file = file_get_contents(DRUPAL_ROOT . '/' . drupal_get_path('module', 'vizshare') . '/vizbuilder/views/' . $filename);
  print $file;
  exit(0);
}

/**
 * Edit /node/add page to tweak new node URL for Visualizations.
 *
 * This is a temp hack. Better integration should be explored.
 *
 * TODO: improve.
 */
function vizshare_page_alter(&$page) {
  // dpm($page);
  // dpm($page['content']['system_main']['main']);
  if (isset($page['content']) and isset($page['content']['system_main']['main'])) {
    $content = $page['content']['system_main']['main']['#markup'];
    $content = str_replace('/node/add/ov-visualisation', '/visualization/new', $content);
    $page['content']['system_main']['main']['#markup'] = $content;
  }
}

function vizshare_builder_form($form, &$form_state) {
  // dpm($form);
  // dpm($form_state);

  $form = array();
  // Define the form to be the Angular root app
  $form['#attributes'] = array(
    'ng-app' => 'vizBuilder'
  );

  //TODO: move to libraries
  $form['#attached']['js'] = array(
    drupal_get_path('module', 'vizshare') .'/js/d3.js',
    drupal_get_path('module', 'vizshare') .'/js/vega.js',
    drupal_get_path('module', 'vizshare') .'/leaflet/leaflet.js',
    drupal_get_path('module', 'vizshare') .'/js/queue.v1.min.js',
    drupal_get_path('module', 'vizshare') .'/js/vizshare-0.1.0.js',
    drupal_get_path('module', 'vizshare') .'/js/vizshare-renderers-0.1.0.js',
    drupal_get_path('module', 'vizshare') .'/js/vizshare-renderer-geoleaflet-0.1.0.js',
    drupal_get_path('module', 'vizshare') .'/js/vizshare.drupal.js',
    drupal_get_path('module', 'vizshare') . '/vizbuilder/components/angular/angular.js',
    drupal_get_path('module', 'vizshare') . '/vizbuilder/components/angular-cookies/angular-cookies.js',
    drupal_get_path('module', 'vizshare') . '/vizbuilder/components/angular-resource/angular-resource.js',
    drupal_get_path('module', 'vizshare') . '/vizbuilder/components/lodash/dist/lodash.js',
    drupal_get_path('module', 'vizshare') . '/vizbuilder/components/restangular/dist/restangular.min.js',
    drupal_get_path('module', 'vizshare') . '/vizbuilder/components/json3/lib/json3.js',
    drupal_get_path('module', 'vizshare') . '/vizbuilder/scripts/scripts.js',
  );
  $form['#attached']['css'] = array(
    drupal_get_path('module', 'vizshare') . '/vizbuilder/styles/datatable.css',
    drupal_get_path('module', 'vizshare') . '/leaflet/leaflet.css',
  );
  // dpm($form_state['build_info']);
  $viz_def_to_edit = '';
  if (count($form_state['build_info']['args']) > 0) {
    $viz_def_to_edit = $form_state['build_info']['args'][0]->field_ov_visualization_data['und'][0]['value'];
  }
  // dpm($vizDef);
  // dpm($vizDef->field_ov_visualization_data);
  $form['divapp'] = array(
    '#markup' => '
<div ng-view></div>
',
    '#weight' => -1,
  );
  $form['vizshare_definition'] = array(
    '#type' => 'textarea',
    '#attributes' => array(
      'init-model' => '',
      'image-path' => '/' . drupal_get_path('module', 'vizshare') . '/vizbuilder'
      // 'ng-value' => 'vizshareDef'
      // TODO: uncomment this to hide for form box
      // 'style' => 'display: none'
    ),
    '#default_value' => $viz_def_to_edit
  );
  // $form['submit'] = array(
  //   '#type' => 'submit',
  //   '#value' => 'Save'
  // );

  $settings = array(
    'url' => variable_get('data_unity_url', ''),
  );

  $form['#attached']['js'][] = array(
    'data' => array('data_unity' => array($settings)),
    'type' => 'setting',
  );

  return $form;
}

function vizshare_builder_form_submit($form, &$form_state) {
  // dpm('vizshare_builder_form_submit');
  // dpm($form);

  $_SESSION['vizshare_definition'] = $form['vizshare_definition']['#value'];

  // dpm($form_state);
  drupal_goto('node/add/ov-visualisation');
}


/**
 * Implements hook_form_alter().
 */
function vizshare_form_alter(&$form, &$form_state, $form_id) {
  // dpm($form_id);
  // dpm($form);
  // dpm($_SESSION);
  // dpm("SESSION[vizshare_definition]");
  // dpm($_SESSION['vizshare_definition']);
  // dpm($form_state);
  switch ($form_id) {
    case 'ov_visualisation_node_form':
      // dpm('saving ov_visualisation_node_form');
      // Form modification code goes here.
      if (strlen($_SESSION['vizshare_definition']) > 0) {
        // dpm('saving vizshare_definition');
        $form['field_ov_visualization_data']['und'][0]['value']['#default_value'] = $_SESSION['vizshare_definition'];
      }
      break;
  }
  // dpm($form);
}


/**
 * @defgroup vizshare Example: Field Types API
 * @ingroup examples
 * @{
 * Examples using Field Types API.
 *
 * This is updated from Barry Jaspan's presentation at Drupalcon Paris,
 * @link http://acquia.com/community/resources/acquia-tv/intro-field-api-module-developers Video Presentation @endlink
 *
 * Providing a field requires:
 * - Defining a field:
 *   - hook_field_info()
 *   - hook_field_schema()
 *   - hook_field_validate()
 *   - hook_field_is_empty()
 *
 * - Defining a formatter for the field (the portion that outputs the field for
 *   display):
 *   - hook_field_formatter_info()
 *   - hook_field_formatter_view()
 *
 * - Defining a widget for the edit form:
 *   - hook_field_widget_info()
 *   - hook_field_widget_form()
 *
 * Our module defines the field in vizshare_field_info(),
 * vizshare_field_validate() and vizshare_field_is_empty().
 * vizshare_field_schema() is implemented in vizshare.install.
 *
 * Our module sets up a formatter in vizshare_field_formatter_info() and
 * vizshare_field_formatter_view(). These are the API hooks that present
 * formatted and themed output to the user.
 *
 * And finally, our module defines the widet in
 * vizshare_field_widget_info() and vizshare_field_widget_form().
 * The widget is the form element used to receive input from the user
 * when the field is being populated.
 *
 * @see field_types
 * @see field
 */

/***************************************************************
 * Field Type API hooks
 ***************************************************************/

/**
 * Implements hook_field_info().
 *
 * Provides the description of the field.
 */
function vizshare_field_info() {
  return array(
    // We name our field as the associative name of the array.
    'vizshare_value' => array(
      'label' => t('VizShare data'),
      'description' => t('Data representation of a visualisation that can be rendered by VizShare library.'),
      'default_widget' => 'vizshare_textarea',
      'default_formatter' => 'vizshare_draw',
    ),
  );
}

/**
 * Implements hook_field_validate().
 *
 * This hook gives us a chance to validate content that's in our
 * field. We're really only interested in the $items parameter, since
 * it holds arrays representing content in the field we've defined.
 * We want to verify that the items only contain RGB hex values like
 * this: #RRGGBB. If the item validates, we do nothing. If it doesn't
 * validate, we add our own error notification to the $errors parameter.
 *
 * @see vizshare_field_widget_error()
 */
function vizshare_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &$errors) {
  // foreach ($items as $delta => $item) {
  //   if (!empty($item['rgb'])) {
  //     if (!preg_match('@^#[0-9a-f]{6}$@', $item['rgb'])) {
  //       $errors[$field['field_name']][$langcode][$delta][] = array(
  //         'error' => 'vizshare_invalid',
  //         'message' => t('Color must be in the HTML format #abcdef.'),
  //       );
  //     }
  //   }
  // }
}

/**
 * Implements hook_field_is_empty().
 *
 * hook_field_is_emtpy() is where Drupal asks us if this field is empty.
 * Return TRUE if it does not contain data, FALSE if it does. This lets
 * the form API flag an error when required fields are empty.
 */
function vizshare_field_is_empty($item, $field) {
  return empty($item['value']);
}

/**
 * Implements hook_field_formatter_view().
 *
 *
 * @see vizshare_field_formatter_info()
 */
function vizshare_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  // dpm('vizshare_field_formatter_view ');
  // kpr($display);
  // kpr($items);
  drupal_add_js(drupal_get_path('module', 'vizshare') .'/js/d3.js', array('weight' => 1));
  drupal_add_js(drupal_get_path('module', 'vizshare') .'/js/vega.js', array('weight' => 2));
  drupal_add_js(drupal_get_path('module', 'vizshare') .'/js/vizshare-0.1.0.js', array('weight' => 3));
  drupal_add_js(drupal_get_path('module', 'vizshare') .'/js/vizshare-renderers-0.1.0.js', array('weight' => 4));
  drupal_add_js(drupal_get_path('module', 'vizshare') .'/js/vizshare.drupal.js', array('weight' => 5));

  $settings = $display['settings'];
  $element = array();

  switch ($display['type']) {
    case 'vizshare_draw':
      foreach ($items as $delta => $viz) {
        // dpm('vizshare_draw');
        $viz_id = uniqid('vizshare_viz'); //drupal_html_id('vizshare_viz');
        $element[$delta] = array(
          '#markup' => '<div id="' . $viz_id .'" style="height: '. $settings['height'] . 'px"></div>',
        );

        $settings = array(
          'vizId' => $viz_id,
          'viz' => drupal_json_decode($viz['value']),
          'height' => $settings['height'],
        );

        $element[$delta]['#attached']['js'][] = array(
          'data' => array('vizshare' => array($settings)),
          'type' => 'setting',
        );
      }
      break;

    case 'vizshare_icon':
      foreach ($items as $delta => $viz) {
        $viz_json = drupal_json_decode($viz['value']);
        $vizType = $viz_json[0]['visualizationType'];

        $element[$delta] = array(
          '#type' => 'html_tag',
          '#tag' => 'img',
          '#attributes' => array(
            'src' => drupal_get_path('module', 'vizshare') . '/images/thmb-' . $vizType . '.png',
            'style' => 'height: 100px; width: 100px',
          ),
        );
      }
      break;
  }
  return $element;
}

/**
 * Implements hook_field_widget_info().
 *
 * Three widgets are provided.
 * - A simple text-only widget where the user enters the '#ffffff'.
 * - A 3-textfield widget that gathers the red, green, and blue values
 *   separately.
 * - A farbtastic colorpicker widget that chooses the value graphically.
 *
 * These widget types will eventually show up in hook_field_widget_form,
 * where we will have to flesh them out.
 *
 * @see vizshare_field_widget_form()
 */
function vizshare_field_widget_info() {
  return array(
    'vizshare_textarea' => array(
      'label' => t('Text area'),
      'field types' => array('vizshare_value'),
    ),
    // 'vizshare_3text' => array(
    //   'label' => t('RGB text field'),
    //   'field types' => array('vizshare_rgb'),
    // ),
    // 'vizshare_colorpicker' => array(
    //   'label' => t('Color Picker'),
    //   'field types' => array('vizshare_rgb'),
    // ),
  );
}

/**
 * Implements hook_field_widget_form().
 *
 * hook_widget_form() is where Drupal tells us to create form elements for
 * our field's widget.
 *
 * We provide one of three different forms, depending on the widget type of
 * the Form API item provided.
 *
 * The 'vizshare_colorpicker' and 'vizshare_text' are essentially
 * the same, but vizshare_colorpicker adds a javascript colorpicker
 * helper.
 *
 * vizshare_3text displays three text fields, one each for red, green,
 * and blue. However, the field type defines a single text column,
 * rgb, which needs an HTML color spec. Define an element validate
 * handler that converts our r, g, and b fields into a simulated single
 * 'rgb' form element.
 */
function vizshare_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  dpm($items);
  dpm($delta);
  $value = isset($items[$delta]['value']) ? $items[$delta]['value'] : '';

  $widget = $element;
  $widget['#delta'] = $delta;

  switch ($instance['widget']['type']) {
    case 'vizshare_textarea':
      $widget += array(
        '#type' => 'textarea',
        '#default_value' => $value,
        // Allow a slightly larger size that the field length to allow for some
        // configurations where all characters won't fit in input field.
        // '#size' => 7,
        // '#maxlength' => 7,
      );
      break;
  }

  $element['value'] = $widget;
  return $element;
}

/**
 * Implements hook_field_widget_error().
 *
 * hook_field_widget_error() lets us figure out what to do with errors
 * we might have generated in hook_field_validate(). Generally, we'll just
 * call form_error().
 *
 * @see vizshare_field_validate()
 * @see form_error()
 */
function vizshare_field_widget_error($element, $error, $form, &$form_state) {
  switch ($error['error']) {
    case 'vizshare_invalid':
      form_error($element, $error['message']);
      break;
  }
}

function vizshare_save_ajax_callback() {

  //retrieve our post value

  $name = $_POST['name'];

  dpm($name);

  //database query executed succefully ,return 'success' message
  if($data){
        // Return json
        drupal_json_output("success");
   }else{
       // Return json
        drupal_json_output("fail");

   }

}


/**
 * @} End of "defgroup vizshare".
 */
